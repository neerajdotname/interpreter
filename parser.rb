#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.6
# from Racc grammer file "".
#

require 'racc/parser.rb'

  require "lexer"
  require "nodes"

class Parser < Racc::Parser

module_eval(<<'...end grammar.y/module_eval...', 'grammar.y', 181)
  def parse(code, show_tokens=false)
    @tokens = Lexer.new.run(code)
    p @tokens if show_tokens
    do_parse
  end
  
  def next_token
    @tokens.shift
  end
...end grammar.y/module_eval...
##### State transition tables begin ###

racc_action_table = [
    26,    88,    23,    24,     5,    16,    17,    18,    19,    20,
    21,    25,    87,    26,    22,    23,    24,     5,    16,    17,
    18,    19,    20,    21,    25,    76,    47,    22,    75,     6,
    15,    67,    79,    44,    48,    29,     5,    40,    41,    38,
    39,    29,     6,    15,    26,     5,    23,    24,     5,    16,
    17,    18,    19,    20,    21,    25,    90,    26,    22,    23,
    24,     6,    16,    17,    18,    19,    20,    21,    25,    85,
     6,    22,    84,     6,    15,    26,    45,    23,    24,    44,
    16,    17,    18,    19,    20,    21,    25,    15,    26,    22,
    23,    24,     5,    16,    17,    18,    19,    20,    21,    25,
    29,    26,    22,    23,    24,    15,    16,    17,    18,    19,
    20,    21,    25,    50,    27,    22,    52,     6,    15,    26,
     5,    23,    24,     5,    16,    17,    18,    19,    20,    21,
    25,    15,    26,    22,    23,    24,     5,    16,    17,    18,
    19,    20,    21,    25,    29,     6,    22,   nil,     6,    15,
     5,    29,   nil,    40,    41,     5,   nil,    29,    95,    40,
    41,     6,    15,    26,   nil,    23,    24,   nil,    16,    17,
    18,    19,    20,    21,    25,     6,    26,    22,    23,    24,
     6,    16,    17,    18,    19,    20,    21,    25,   nil,    26,
    22,    23,    24,    15,    16,    17,    18,    19,    20,    21,
    25,   nil,   nil,    22,   nil,   nil,    15,    26,   nil,    23,
    24,     5,    16,    17,    18,    19,    20,    21,    25,    15,
    26,    22,    23,    24,   nil,    16,    17,    18,    19,    20,
    21,    25,   nil,   nil,    22,   nil,     6,    15,    26,   nil,
    23,    24,   nil,    16,    17,    18,    19,    20,    21,    25,
    15,    26,    22,    23,    24,   nil,    16,    17,    18,    19,
    20,    21,    25,   nil,    26,    22,    23,    24,    15,    16,
    17,    18,    19,    20,    21,    25,   nil,    26,    22,    23,
    24,    15,    16,    17,    18,    19,    20,    21,    25,   nil,
    26,    22,    23,    24,    15,    16,    17,    18,    19,    20,
    21,    25,   nil,    26,    22,    23,    24,    15,    16,    17,
    18,    19,    20,    21,    25,   nil,    26,    22,    23,    24,
    15,    16,    17,    18,    19,    20,    21,    25,   nil,    26,
    22,    23,    24,    15,    16,    17,    18,    19,    20,    21,
    25,   nil,    26,    22,    23,    24,    15,    16,    17,    18,
    19,    20,    21,    25,   nil,    26,    22,    23,    24,    15,
    16,    17,    18,    19,    20,    21,    25,     5,    26,    22,
    23,    24,    15,    16,    17,    18,    19,    20,    21,    25,
   nil,   nil,    22,   nil,   nil,    15,     5,     5,     5,   nil,
   nil,   nil,     6,    71,    94,    86,   nil,    29,    15,    40,
    41,    38,    39,    34,    35,    36,    37,    32,    33,    31,
    30,     6,     6,     6,     5,    29,   nil,    40,    41,    38,
    39,   nil,    83,    29,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    31,    30,   nil,   nil,     6,
    29,    65,    40,    41,    38,    39,    34,    35,    36,    37,
    32,    33,    31,    30,    29,   nil,    40,    41,    38,    39,
    34,    35,    36,    37,    32,    33,    31,    30,    29,   nil,
    40,    41,    38,    39,    34,    35,    36,    37,    32,    33,
    31,    30,    29,   nil,    40,    41,    38,    39,    34,    35,
    36,    37,    32,    33,    31,    30,    29,   nil,    40,    41,
    38,    39,    34,    35,    36,    37,    32,    33,    31,    30,
    29,   nil,    40,    41,    38,    39,    34,    35,    36,    37,
    32,    33,    31,    29,   nil,    40,    41,    38,    39,    34,
    35,    36,    37,    32,    33,    29,   nil,    40,    41,    38,
    39,    34,    35,    36,    37,    29,   nil,    40,    41,    38,
    39,    34,    35,    36,    37,    29,   nil,    40,    41,    38,
    39,    29,   nil,    40,    41,    38,    39 ]

racc_action_check = [
    44,    81,    44,    44,    81,    44,    44,    44,    44,    44,
    44,    44,    81,     0,    44,     0,     0,     0,     0,     0,
     0,     0,     0,     0,     0,    68,    23,     0,    68,    81,
    44,    44,    71,    52,    24,    57,    48,    57,    57,    57,
    57,    63,     0,     0,    89,    88,    89,    89,    89,    89,
    89,    89,    89,    89,    89,    89,    85,    76,    89,    76,
    76,    48,    76,    76,    76,    76,    76,    76,    76,    78,
    88,    76,    78,    89,    89,    15,    21,    15,    15,    21,
    15,    15,    15,    15,    15,    15,    15,    76,    73,    15,
    73,    73,    73,    73,    73,    73,    73,    73,    73,    73,
    46,    22,    73,    22,    22,    15,    22,    22,    22,    22,
    22,    22,    22,    27,     1,    22,    29,    73,    73,    72,
     2,    72,    72,    72,    72,    72,    72,    72,    72,    72,
    72,    22,    70,    72,    70,    70,    70,    70,    70,    70,
    70,    70,    70,    70,    64,     2,    70,   nil,    72,    72,
    93,    61,   nil,    61,    61,    84,   nil,    62,    93,    62,
    62,    70,    70,    26,   nil,    26,    26,   nil,    26,    26,
    26,    26,    26,    26,    26,    93,    45,    26,    45,    45,
    84,    45,    45,    45,    45,    45,    45,    45,   nil,    28,
    45,    28,    28,    26,    28,    28,    28,    28,    28,    28,
    28,   nil,   nil,    28,   nil,   nil,    45,    91,   nil,    91,
    91,    91,    91,    91,    91,    91,    91,    91,    91,    28,
    30,    91,    30,    30,   nil,    30,    30,    30,    30,    30,
    30,    30,   nil,   nil,    30,   nil,    91,    91,    31,   nil,
    31,    31,   nil,    31,    31,    31,    31,    31,    31,    31,
    30,    32,    31,    32,    32,   nil,    32,    32,    32,    32,
    32,    32,    32,   nil,    41,    32,    41,    41,    31,    41,
    41,    41,    41,    41,    41,    41,   nil,    34,    41,    34,
    34,    32,    34,    34,    34,    34,    34,    34,    34,   nil,
    35,    34,    35,    35,    41,    35,    35,    35,    35,    35,
    35,    35,   nil,    36,    35,    36,    36,    34,    36,    36,
    36,    36,    36,    36,    36,   nil,    37,    36,    37,    37,
    35,    37,    37,    37,    37,    37,    37,    37,   nil,    38,
    37,    38,    38,    36,    38,    38,    38,    38,    38,    38,
    38,   nil,    39,    38,    39,    39,    37,    39,    39,    39,
    39,    39,    39,    39,   nil,    40,    39,    40,    40,    38,
    40,    40,    40,    40,    40,    40,    40,    47,    33,    40,
    33,    33,    39,    33,    33,    33,    33,    33,    33,    33,
   nil,   nil,    33,   nil,   nil,    40,    92,    80,    49,   nil,
   nil,   nil,    47,    47,    92,    80,   nil,    49,    33,    49,
    49,    49,    49,    49,    49,    49,    49,    49,    49,    49,
    49,    92,    80,    49,    77,    58,   nil,    58,    58,    58,
    58,   nil,    77,    42,   nil,    42,    42,    42,    42,    42,
    42,    42,    42,    42,    42,    42,    42,   nil,   nil,    77,
    66,    42,    66,    66,    66,    66,    66,    66,    66,    66,
    66,    66,    66,    66,     3,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,    51,   nil,
    51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    51,    51,    69,   nil,    69,    69,    69,    69,    69,    69,
    69,    69,    69,    69,    69,    69,    82,   nil,    82,    82,
    82,    82,    82,    82,    82,    82,    82,    82,    82,    82,
    53,   nil,    53,    53,    53,    53,    53,    53,    53,    53,
    53,    53,    53,    54,   nil,    54,    54,    54,    54,    54,
    54,    54,    54,    54,    54,    56,   nil,    56,    56,    56,
    56,    56,    56,    56,    56,    55,   nil,    55,    55,    55,
    55,    55,    55,    55,    55,    60,   nil,    60,    60,    60,
    60,    59,   nil,    59,    59,    59,    59 ]

racc_action_pointer = [
    11,   114,   114,   439,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    73,   nil,   nil,   nil,   nil,
   nil,    47,    99,    14,    21,   nil,   161,   113,   187,   104,
   218,   236,   249,   366,   275,   288,   301,   314,   327,   340,
   353,   262,   408,   nil,    -2,   174,    85,   361,    30,   382,
   nil,   453,     1,   495,   508,   530,   520,    20,   400,   546,
   540,   136,   142,    26,   129,   nil,   425,   nil,    -5,   467,
   130,    20,   117,    86,   nil,   nil,    55,   408,    39,   nil,
   381,    -2,   481,   nil,   149,    44,   nil,   nil,    39,    42,
   nil,   205,   380,   144,   nil,   nil ]

racc_action_default = [
    -1,   -54,    -2,    -3,    -6,    -7,    -8,    -9,   -10,   -11,
   -12,   -13,   -14,   -15,   -16,   -54,   -18,   -19,   -20,   -21,
   -22,   -23,   -54,   -54,   -54,   -51,   -54,   -54,    -5,   -54,
   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,   -54,
   -54,   -54,   -54,   -24,   -54,   -54,   -43,   -54,   -54,   -54,
    96,    -4,   -25,   -31,   -32,   -33,   -34,   -35,   -36,   -37,
   -38,   -39,   -40,   -41,   -42,   -17,   -29,   -27,   -54,   -44,
   -54,   -47,   -54,   -54,   -26,   -28,   -54,   -54,   -54,   -48,
   -54,   -54,   -30,   -45,   -54,   -54,   -50,   -52,   -54,   -54,
   -49,   -54,   -54,   -54,   -46,   -53 ]

racc_goto_table = [
    28,    42,    43,     1,     2,    68,    78,   nil,    46,   nil,
   nil,   nil,    49,   nil,    51,   nil,    53,    54,    55,    56,
    57,    58,    59,    60,    61,    62,    63,    64,   nil,   nil,
    66,    69,   nil,    74,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    70,    72,    73,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    82,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    77,    28,    80,    81,    28,    28,
   nil,   nil,    89,   nil,   nil,   nil,    91,   nil,   nil,   nil,
    28,    28,   nil,    92,   nil,    93 ]

racc_goto_check = [
     4,     3,    13,     1,     2,    14,    15,   nil,     3,   nil,
   nil,   nil,     3,   nil,     3,   nil,     3,     3,     3,     3,
     3,     3,     3,     3,     3,     3,     3,     3,   nil,   nil,
     3,     3,   nil,    13,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     4,     4,     4,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     3,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     2,     4,     2,     2,     4,     4,
   nil,   nil,     4,   nil,   nil,   nil,     4,   nil,   nil,   nil,
     4,     4,   nil,     2,   nil,     2 ]

racc_goto_pointer = [
   nil,     3,     4,   -14,    -2,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   -19,   -39,   -65 ]

racc_goto_default = [
   nil,   nil,   nil,     3,     4,     7,     8,     9,    10,    11,
    12,    13,    14,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  0, 35, :_reduce_1,
  1, 35, :_reduce_2,
  1, 36, :_reduce_3,
  3, 36, :_reduce_4,
  2, 36, :_reduce_5,
  1, 36, :_reduce_6,
  1, 38, :_reduce_none,
  1, 38, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  1, 37, :_reduce_none,
  3, 37, :_reduce_17,
  1, 39, :_reduce_18,
  1, 39, :_reduce_19,
  1, 39, :_reduce_20,
  1, 39, :_reduce_21,
  1, 39, :_reduce_22,
  1, 40, :_reduce_23,
  2, 40, :_reduce_24,
  3, 40, :_reduce_25,
  4, 40, :_reduce_26,
  2, 47, :_reduce_27,
  3, 47, :_reduce_28,
  1, 48, :_reduce_29,
  3, 48, :_reduce_30,
  3, 41, :_reduce_31,
  3, 41, :_reduce_32,
  3, 41, :_reduce_33,
  3, 41, :_reduce_34,
  3, 41, :_reduce_35,
  3, 41, :_reduce_36,
  3, 41, :_reduce_37,
  3, 41, :_reduce_38,
  3, 41, :_reduce_39,
  3, 41, :_reduce_40,
  3, 41, :_reduce_41,
  3, 41, :_reduce_42,
  2, 41, :_reduce_43,
  3, 43, :_reduce_44,
  5, 44, :_reduce_45,
  8, 44, :_reduce_46,
  0, 49, :_reduce_47,
  1, 49, :_reduce_48,
  3, 49, :_reduce_49,
  5, 45, :_reduce_50,
  1, 42, :_reduce_51,
  5, 46, :_reduce_52,
  8, 46, :_reduce_53 ]

racc_reduce_n = 54

racc_shift_n = 96

racc_token_table = {
  false => 0,
  :error => 1,
  :IF => 2,
  :ELSE => 3,
  :DEF => 4,
  :CLASS => 5,
  :NEWLINE => 6,
  :NUMBER => 7,
  :STRING => 8,
  :TRUE => 9,
  :FALSE => 10,
  :NIL => 11,
  :IDENTIFIER => 12,
  :CONSTANT => 13,
  :END => 14,
  "." => 15,
  "!" => 16,
  "*" => 17,
  "/" => 18,
  "+" => 19,
  "-" => 20,
  ">" => 21,
  ">=" => 22,
  "<" => 23,
  "<=" => 24,
  "==" => 25,
  "!=" => 26,
  "&&" => 27,
  "||" => 28,
  "=" => 29,
  "," => 30,
  ";" => 31,
  "(" => 32,
  ")" => 33 }

racc_nt_base = 34

racc_use_result_var = true

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "IF",
  "ELSE",
  "DEF",
  "CLASS",
  "NEWLINE",
  "NUMBER",
  "STRING",
  "TRUE",
  "FALSE",
  "NIL",
  "IDENTIFIER",
  "CONSTANT",
  "END",
  "\".\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"+\"",
  "\"-\"",
  "\">\"",
  "\">=\"",
  "\"<\"",
  "\"<=\"",
  "\"==\"",
  "\"!=\"",
  "\"&&\"",
  "\"||\"",
  "\"=\"",
  "\",\"",
  "\";\"",
  "\"(\"",
  "\")\"",
  "$start",
  "Root",
  "Expressions",
  "Expression",
  "Terminator",
  "Literal",
  "Call",
  "Operator",
  "Constant",
  "Assign",
  "Def",
  "Class",
  "If",
  "ArgListWithParens",
  "ArgList",
  "ParamList" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

module_eval(<<'.,.,', 'grammar.y', 46)
  def _reduce_1(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 47)
  def _reduce_2(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 52)
  def _reduce_3(val, _values, result)
     result = Nodes.new(val) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 53)
  def _reduce_4(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 55)
  def _reduce_5(val, _values, result)
     result = val[0] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 56)
  def _reduce_6(val, _values, result)
     result = Nodes.new([]) 
    result
  end
.,.,

# reduce 7 omitted

# reduce 8 omitted

# reduce 9 omitted

# reduce 10 omitted

# reduce 11 omitted

# reduce 12 omitted

# reduce 13 omitted

# reduce 14 omitted

# reduce 15 omitted

# reduce 16 omitted

module_eval(<<'.,.,', 'grammar.y', 75)
  def _reduce_17(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 80)
  def _reduce_18(val, _values, result)
     result = NumberNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 81)
  def _reduce_19(val, _values, result)
     result = StringNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 82)
  def _reduce_20(val, _values, result)
     result = TrueNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 83)
  def _reduce_21(val, _values, result)
     result = FalseNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 84)
  def _reduce_22(val, _values, result)
     result = NilNode.new 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 90)
  def _reduce_23(val, _values, result)
     result = CallNode.new(nil, val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 92)
  def _reduce_24(val, _values, result)
     result = CallNode.new(nil, val[0], val[1]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 94)
  def _reduce_25(val, _values, result)
     result = CallNode.new(val[0], val[2], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 97)
  def _reduce_26(val, _values, result)
     result = CallNode.new(val[0], val[2], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 101)
  def _reduce_27(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 102)
  def _reduce_28(val, _values, result)
     result = val[1] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 106)
  def _reduce_29(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 107)
  def _reduce_30(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 112)
  def _reduce_31(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 113)
  def _reduce_32(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 114)
  def _reduce_33(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 115)
  def _reduce_34(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 116)
  def _reduce_35(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 117)
  def _reduce_36(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 118)
  def _reduce_37(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 119)
  def _reduce_38(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 122)
  def _reduce_39(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 123)
  def _reduce_40(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 124)
  def _reduce_41(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 125)
  def _reduce_42(val, _values, result)
     result = CallNode.new(val[0], val[1], [val[2]]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 127)
  def _reduce_43(val, _values, result)
     result = CallNode.new(val[1], val[0], []) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 132)
  def _reduce_44(val, _values, result)
     result = AssignNode.new(val[0], val[2]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 139)
  def _reduce_45(val, _values, result)
     result = DefNode.new(val[1], [], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 142)
  def _reduce_46(val, _values, result)
     result = DefNode.new(val[1], val[3], val[6]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 146)
  def _reduce_47(val, _values, result)
     result = [] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 147)
  def _reduce_48(val, _values, result)
     result = val 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 148)
  def _reduce_49(val, _values, result)
     result = val[0] << val[2] 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 155)
  def _reduce_50(val, _values, result)
     result = ClassNode.new(val[1], val[3]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 160)
  def _reduce_51(val, _values, result)
     result = ConstantNode.new(val[0]) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 166)
  def _reduce_52(val, _values, result)
     result = IfNode.new(val[1], val[3], nil) 
    result
  end
.,.,

module_eval(<<'.,.,', 'grammar.y', 171)
  def _reduce_53(val, _values, result)
     result = IfNode.new(val[1], val[3], val[6]) 
    result
  end
.,.,

def _reduce_none(val, _values, result)
  val[0]
end

end   # class Parser
